using JuMP
using QUBODrivers
using BenchmarkTools

vars = 20
p=2
t=-1
Q = [
    [-2, 2, 2, 1,3, 0, 1, 0, 0, 0,0, 0,-4,-4, 0, 0, 0, 0, 0, 0],
    [ 0,-2, 2, 1,0, 1, 0, 1, 0, 0,0, 0,-4, 0,-4, 0, 0, 0, 0, 0],
    [ 0, 0,-2, 0,3, 1, 0, 0, 1, 0,0, 0, 0,-4,-4, 0, 0, 0, 0, 0],
    [ 0, 0, 0,-2,4, 1, 0, 0, 0, 1,0, 0,-6, 0, 0,-4, 0, 0, 0, 0],
    [ 0, 0, 0, 0,2, 3, 0, 0, 0, 0,0, 0, 0,-6, 0,-4, 0, 0, 0, 0],
    [ 0, 0, 0, 0,0,-2, 0, 0, 0, 0,0, 1, 0, 0,-6,-6, 0, 0, 0, 0],
    [ 0, 0, 0, 0,0, 0,-2, 2, 2, 1,3, 0, 0, 0, 0, 0,-4,-4, 0, 0],
    [ 0, 0, 0, 0,0, 0, 0,-2, 2, 1,0, 1, 0, 0, 0, 0,-4, 0,-4, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0,-2, 0,3, 1, 0, 0, 0, 0, 0,-4,-4, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0,-2,4, 1, 0, 0, 0, 0,-6, 0, 0,-4],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,2, 3, 0, 0, 0, 0, 0,-6, 0,-4],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0,-2, 0, 0, 0, 0, 0, 0,-6,-6],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0, 0, 6, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0, 0, 0, 6, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0, 0, 0, 0, 6, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 6, 0, 0, 0, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 6, 0, 0, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 6, 0, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 6, 0],
    [ 0, 0, 0, 0,0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 6],
]

q = reduce(hcat, Q)'
show(q)
println()
@time begin
    model = Model(ExactSampler.Optimizer)

    @variable(model, x[1:(vars)], Bin)
    @objective(model, Min, x' * q * x)

    optimize!(model)
end
nodes = 4
possible_edges = [(x,y) for x =1:nodes for y =x+1:nodes]
edges_vars = length(possible_edges)
for i = 1:2
    xi = value.(x; result=i)
    yi = objective_value(model; result=i)

    println("f($xi) = $yi")
    for i=1:(12)
        if xi[i] == 1.0
            println("Edge ", possible_edges[i - (edges_vars*div(i-1,edges_vars))], " in tesselation ", 1+div(i,(edges_vars+1)))
        end
    end
end